" This file is automatically generated by test-syntax from testing.vim

fun! Test_all_basic() abort
let g:gopher_highlight = ["string-spell", "string-fmt", "fold-block", "fold-import", "fold-pkg-comment", "fold-varconst"]
try
    call TestSyntax(g:test_packdir . '/syntax/testdata/basic.go',
        \ [
        \ [['goPackage', 1, 8]],
        \ [],
        \ [['goImport', 1, 7], ['goString', 8, 12]],
        \ [],
        \ [['goDeclaration', 1, 5]],
        \ [['goVar', 2, 5], ['goType', 10, 16], ['goString', 19, 29]],
        \ [],
        \ [],
    \ ])
finally
    let gopher_highlight = ["string-spell", "string-fmt"]
endtry
endfun

fun! Test_all_builtin() abort
let g:gopher_highlight = ["string-spell", "string-fmt", "fold-block", "fold-import", "fold-pkg-comment", "fold-varconst"]
try
    call TestSyntax(g:test_packdir . '/syntax/testdata/builtin.go',
        \ [
        \ [['goPackage', 1, 8]],
        \ [],
        \ [['goImport', 1, 7], ['goString', 8, 12]],
        \ [],
        \ [['goVar', 1, 4], ['goBuiltins', 5, 8], ['goDecimalInt', 11, 11]],
        \ [],
        \ [['goDeclaration', 1, 5], ['goBuiltins', 6, 12]],
        \ [],
        \ [['goDeclaration', 1, 5], ['goBuiltins', 12, 18]],
        \ [['goBuiltins', 2, 8], ['goDecimalInt', 12, 12]],
        \ [['goBuiltins', 4, 10], ['goBuiltins', 11, 17]],
        \ [['goBuiltins', 6, 12]],
        \ [['goBoolean', 18, 20]],
        \ [['goBoolean', 11, 14]],
        \ [['goConditional', 2, 4]],
        \ [],
        \ [],
        \ [['goBuiltins', 14, 17], ['goString', 18, 20]],
        \ [],
        \ [],
        \ [['goDeclaration', 1, 5], ['goType', 12, 15], ['goType', 25, 28], ['goType', 37, 40]],
        \ [],
        \ [['goDeclaration', 1, 5], ['goType', 12, 15], ['goType', 20, 23]],
        \ [],
        \ [['goDeclaration', 1, 5], ['goType', 12, 15], ['goType', 21, 24], ['goType', 31, 34], ['goType', 37, 40], ['goType', 42, 45]],
        \ [],
        \ [['goDeclaration', 1, 5], ['goType', 12, 15]],
        \ [['goType', 7, 10]],
        \ [['goType', 7, 10]],
        \ [],
        \ [],
        \ [],
        \ [['goDeclaration', 1, 5], ['goType', 13, 16]],
        \ [],
        \ [['goType', 4, 7], ['goType', 8, 11]],
        \ [['goVar', 2, 5], ['goType', 8, 11], ['goDecimalInt', 14, 14]],
        \ [['goVar', 2, 5], ['goType', 10, 13], ['goDecimalInt', 14, 15]],
        \ [['goVar', 2, 5], ['goType', 8, 10]],
        \ [['goType', 8, 12], ['goString', 13, 16]],
        \ [['goType', 14, 17], ['goDecimalInt', 18, 19], ['goType', 22, 25], ['goDecimalInt', 26, 27]],
        \ [],
        \ [['goConditional', 2, 4], ['goType', 10, 14], ['goBoolean', 15, 19]],
        \ [],
        \ [],
        \ [],
        \ [['goDeclaration', 1, 5], ['goType', 17, 20], ['goType', 22, 25]],
        \ [],
        \ [],
        \ [['goVar', 1, 4], ['goDeclaration', 13, 17], ['goType', 18, 21], ['goType', 23, 25]],
        \ [],
        \ [['goDeclaration', 1, 5], ['goDeclaration', 18, 22], ['goType', 23, 26], ['goType', 28, 31]],
        \ [['goVar', 2, 5], ['goDeclaration', 8, 12], ['goType', 13, 16], ['goType', 18, 20]],
        \ [['goDeclaration', 7, 11], ['goType', 14, 17], ['goType', 19, 22]],
        \ [['goStatement', 3, 9], ['goDecimalInt', 10, 10]],
        \ [],
        \ [],
        \ [['goDeclaration', 5, 9], ['goType', 12, 15], ['goType', 17, 20]],
        \ [['goStatement', 3, 9], ['goString', 10, 11]],
        \ [],
        \ [],
    \ ])
finally
    let gopher_highlight = ["string-spell", "string-fmt"]
endtry
endfun

fun! Test_all_cgo() abort
let g:gopher_highlight = ["string-spell", "string-fmt", "fold-block", "fold-import", "fold-pkg-comment", "fold-varconst"]
try
    call TestSyntax(g:test_packdir . '/syntax/testdata/cgo.go',
        \ [
        \ [['goPackage', 1, 8]],
        \ [],
        \ [['goComment', 1, 2]],
        \ [['goCgo', 1, 18]],
        \ [['goCgo', 1, 14]],
        \ [['goCgo', 1, 26]],
        \ [['goCgo', 1, 31]],
        \ [['goCgo', 1, 16]],
        \ [['goCgo', 1, 35]],
        \ [['goComment', 1, 7]],
        \ [],
        \ [['goComment', 1, 13]],
        \ [],
        \ [['goCgoError', 1, 35]],
        \ [['goCgoError', 1, 27]],
        \ [['goCgoError', 1, 17]],
        \ [['goComment', 1, 7]],
        \ [],
        \ [['goCgo', 1, 22]],
        \ [['goCgo', 1, 28]],
        \ [['goCgo', 1, 5]],
        \ [['goCgo', 1, 20]],
        \ [['goCgo', 1, 6]],
        \ [['goComment', 1, 2]],
        \ [],
        \ [['goComment', 1, 11]],
        \ [['goCgo', 1, 21]],
        \ [['goCgo', 1, 17]],
        \ [['goCgo', 1, 29]],
        \ [['goCgo', 1, 34]],
        \ [['goCgo', 1, 19]],
        \ [['goCgo', 1, 29]],
        \ [['goCgo', 1, 38]],
        \ [['goComment', 1, 11]],
        \ [],
        \ [['goCgoError', 1, 38]],
        \ [['goCgoError', 1, 30]],
        \ [['goCgoError', 1, 20]],
        \ [['goComment', 1, 2]],
        \ [['goCgo', 1, 25]],
        \ [['goCgo', 1, 33]],
        \ [['goCgo', 1, 8]],
        \ [['goCgo', 1, 25]],
        \ [['goCgo', 1, 9]],
        \ [['goCgo', 1, 65]],
        \ [['goCgo', 1, 36]],
        \ [['goCgo', 1, 65]],
        \ [['goImport', 1, 7], ['goString', 8, 10]],
        \ [],
        \ [['goCgo', 1, 10]],
        \ [['goDeclaration', 1, 5]],
        \ [],
        \ [['goComment', 1, 29]],
    \ ])
finally
    let gopher_highlight = ["string-spell", "string-fmt"]
endtry
endfun

fun! Test_all_directive() abort
let g:gopher_highlight = ["string-spell", "string-fmt", "fold-block", "fold-import", "fold-pkg-comment", "fold-varconst"]
try
    call TestSyntax(g:test_packdir . '/syntax/testdata/directive.go',
        \ [
        \ [['goBuildTagStart', 1, 1], ['goBuildTag', 3, 3], ['goBuildKeyword', 4, 4], ['goBuildTag', 10, 13]],
        \ [],
        \ [['goGenerateKW', 1, 1], ['goGenerate', 14, 17]],
        \ [],
        \ [['goPackage', 1, 8]],
        \ [],
        \ [['goCompilerDir', 1, 12]],
        \ [['goDeclaration', 1, 5], ['goType', 17, 20]],
        \ [['goStatement', 2, 8], ['goDecimalInt', 9, 10]],
        \ [],
    \ ])
finally
    let gopher_highlight = ["string-spell", "string-fmt"]
endtry
endfun

fun! Test_all_directive_error() abort
let g:gopher_highlight = ["string-spell", "string-fmt", "fold-block", "fold-import", "fold-pkg-comment", "fold-varconst"]
try
    call TestSyntax(g:test_packdir . '/syntax/testdata/directive_error.go',
        \ [
        \ [['goDirectiveError', 1, 18]],
        \ [],
        \ [['goBuildTagError', 1, 13]],
        \ [['goBuildTagError', 1, 12]],
        \ [],
        \ [['goDirectiveError', 1, 13]],
        \ [['goDeclaration', 1, 5], ['goType', 17, 20]],
        \ [['goStatement', 2, 8], ['goDecimalInt', 9, 10]],
        \ [],
    \ ])
finally
    let gopher_highlight = ["string-spell", "string-fmt"]
endtry
endfun

fun! Test_all_directive_pkg() abort
let g:gopher_highlight = ["string-spell", "string-fmt", "fold-block", "fold-import", "fold-pkg-comment", "fold-varconst"]
try
    call TestSyntax(g:test_packdir . '/syntax/testdata/directive_pkg.go',
        \ [
        \ [['goGenerateKW', 1, 1], ['goGenerate', 14, 23]],
        \ [['goPackage', 1, 8], ['goComment', 14, 43]],
    \ ])
finally
    let gopher_highlight = ["string-spell", "string-fmt"]
endtry
endfun

fun! Test_all_fmt() abort
let g:gopher_highlight = ["string-spell", "string-fmt", "fold-block", "fold-import", "fold-pkg-comment", "fold-varconst"]
try
    call TestSyntax(g:test_packdir . '/syntax/testdata/fmt.go',
        \ [
        \ [['goPackage', 1, 8]],
        \ [],
        \ [['goVar', 1, 4]],
        \ [['goString', 12, 12], ['goFormatSpecifier', 13, 13], ['goString', 15, 15], ['goFormatSpecifier', 17, 17], ['goString', 20, 20], ['goFormatSpecifier', 21, 21], ['goString', 26, 26]],
        \ [['goString', 12, 12], ['goFormatSpecifier', 13, 13], ['goString', 16, 17]],
        \ [['goString', 12, 12], ['goFormatSpecifier', 16, 16], ['goString', 18, 21]],
        \ [['goString', 12, 12], ['goFormatSpecifier', 13, 13], ['goString', 17, 17], ['goFormatSpecifier', 19, 19], ['goString', 26, 26], ['goFormatSpecifier', 27, 27], ['goString', 30, 30], ['goFormatSpecifier', 31, 31], ['goString', 36, 36], ['goFormatSpecifier', 37, 37], ['goString', 40, 40]],
        \ [['goString', 12, 29]],
        \ [],
    \ ])
finally
    let gopher_highlight = ["string-spell", "string-fmt"]
endtry
endfun

fun! Test_all_go() abort
let g:gopher_highlight = ["string-spell", "string-fmt", "fold-block", "fold-import", "fold-pkg-comment", "fold-varconst"]
try
    call TestSyntax(g:test_packdir . '/syntax/testdata/go.mod',
        \ [
        \ [['gomodKeywords', 1, 7]],
        \ [],
        \ [['gomodKeywords', 1, 3]],
        \ [],
        \ [['gomodComment', 1, 11]],
        \ [['gomodKeywords', 1, 8]],
        \ [['gomodVersion', 29, 29], ['gomodIndirect', 35, 46]],
        \ [['gomodVersion', 24, 43], ['gomodComment', 44, 56]],
        \ [['gomodVersion', 15, 48]],
        \ [],
        \ [],
        \ [['gomodComment', 1, 78]],
        \ [['gomodComment', 1, 79]],
        \ [['gomodKeywords', 1, 8], ['gomodReplace', 38, 40], ['gomodVersion', 68, 101]],
    \ ])
finally
    let gopher_highlight = ["string-spell", "string-fmt"]
endtry
endfun

fun! Test_all_invalid_numbers() abort
let g:gopher_highlight = ["string-spell", "string-fmt", "fold-block", "fold-import", "fold-pkg-comment", "fold-varconst"]
try
    call TestSyntax(g:test_packdir . '/syntax/testdata/invalid_numbers.go',
        \ [
        \ [['goBuildTagStart', 1, 1], ['goBuildTag', 3, 3], ['goBuildKeyword', 4, 4], ['goBuildTag', 10, 20]],
        \ [],
        \ [['goPackage', 1, 8]],
        \ [],
        \ [['goVar', 1, 4]],
        \ [['goOctalError', 22, 25]],
        \ [['goOctalError', 22, 26]],
        \ [['goOctalError', 22, 30]],
        \ [['goBinaryError', 22, 27]],
        \ [['goHexError', 22, 25]],
        \ [],
        \ [['goComment', 3, 58]],
        \ [],
        \ [['goDecimalInt', 22, 24]],
        \ [['goDecimalInt', 22, 25]],
        \ [['goFloat', 22, 26]],
        \ [['goFloat', 22, 26]],
        \ [],
    \ ])
finally
    let gopher_highlight = ["string-spell", "string-fmt"]
endtry
endfun

fun! Test_all_numbers() abort
let g:gopher_highlight = ["string-spell", "string-fmt", "fold-block", "fold-import", "fold-pkg-comment", "fold-varconst"]
try
    call TestSyntax(g:test_packdir . '/syntax/testdata/numbers.go',
        \ [
        \ [['goPackage', 1, 8]],
        \ [],
        \ [['goVar', 1, 4]],
        \ [['goDecimalInt', 11, 13]],
        \ [['goOctalInt', 11, 14]],
        \ [['goOctalInt', 11, 15]],
        \ [['goHexadecimalInt', 11, 16]],
        \ [['goBinaryInt', 11, 16]],
        \ [],
        \ [],
        \ [['goFloat', 11, 15]],
        \ [['goFloat', 11, 14]],
        \ [['goFloat', 11, 16]],
        \ [['goFloat', 11, 15]],
        \ [['goComment', 2, 23]],
        \ [],
        \ [['goDecimalInt', 13, 15]],
        \ [['goHexadecimalInt', 13, 16]],
        \ [],
        \ [['goDecimalInt', 12, 18]],
        \ [['goHexadecimalInt', 12, 18]],
        \ [['goBinaryInt', 12, 22]],
        \ [['goDecimalInt', 12, 12]],
        \ [],
    \ ])
finally
    let gopher_highlight = ["string-spell", "string-fmt"]
endtry
endfun

fun! Test_all_struct() abort
let g:gopher_highlight = ["string-spell", "string-fmt", "fold-block", "fold-import", "fold-pkg-comment", "fold-varconst"]
try
    call TestSyntax(g:test_packdir . '/syntax/testdata/struct.go',
        \ [
        \ [['goPackage', 1, 8]],
        \ [],
        \ [['goImport', 1, 7], ['goString', 8, 12]],
        \ [],
        \ [['goDeclaration', 1, 5], ['goStruct', 8, 14]],
        \ [['goDeclaration', 1, 5], ['goStruct', 8, 14], ['goType', 18, 21]],
        \ [],
        \ [['goDeclaration', 1, 5], ['goType', 15, 19], ['goStruct', 20, 26]],
        \ [],
        \ [['goDeclaration', 1, 5], ['goStruct', 8, 14]],
        \ [['goType', 4, 4], ['goStructTag', 7, 7], ['goStructTagName', 9, 9], ['goStructTag', 14, 19]],
        \ [['goType', 4, 7], ['goRawString', 8, 19], ['goComment', 20, 20], ['goTodo', 23, 23], ['goComment', 27, 40]],
        \ [['goType', 4, 4], ['goStructTag', 7, 7], ['goStructTagError', 9, 9], ['goStructTag', 14, 20]],
        \ [['goType', 4, 4], ['goStructTag', 7, 7], ['goStructTagError', 9, 9], ['goStructTag', 14, 20]],
        \ [['goType', 4, 4], ['goStructTag', 7, 7], ['goStructTagError', 9, 9], ['goStructTag', 15, 21]],
        \ [['goType', 4, 4], ['goStructTag', 7, 7], ['goStructTagName', 9, 9], ['goStructTag', 14, 29]],
        \ [['goType', 4, 7], ['goRawString', 8, 31], ['goComment', 32, 32], ['goTodo', 35, 35], ['goComment', 39, 54]],
        \ [],
        \ [],
        \ [['goConst', 1, 6], ['goRawString', 11, 39]],
        \ [['goRawString', 1, 1]],
        \ [['goRawString', 1, 1]],
        \ [],
        \ [['goVar', 1, 4], ['goRawString', 9, 50], ['goRawString', 57, 59]],
        \ [],
        \ [['goComment', 1, 53]],
        \ [['goConst', 1, 6], ['goDecimalInt', 19, 19]],
        \ [],
        \ [['goVar', 1, 4]],
        \ [['goType', 6, 9], ['goType', 10, 13], ['goType', 14, 20]],
        \ [['goString', 14, 17]],
        \ [['goDecimalInt', 3, 4], ['goString', 14, 22]],
        \ [],
        \ [],
        \ [],
        \ [['goString', 6, 11]],
        \ [],
        \ [],
        \ [],
        \ [['goVar', 1, 4], ['goType', 9, 12], ['goType', 13, 16], ['goType', 17, 23]],
        \ [['goString', 13, 16]],
        \ [['goDecimalInt', 2, 3], ['goString', 13, 21]],
        \ [],
        \ [],
        \ [['goVar', 1, 4]],
        \ [['goString', 5, 8]],
        \ [],
        \ [],
        \ [['goConst', 1, 6], ['goRawString', 11, 11]],
        \ [['goRawString', 1, 4]],
        \ [['goRawString', 1, 15]],
        \ [['goRawString', 1, 12]],
        \ [['goRawString', 1, 4]],
        \ [['goRawString', 1, 1]],
        \ [],
        \ [['goDeclaration', 1, 5]],
        \ [['goStruct', 4, 10]],
        \ [['goType', 5, 5], ['goStructTag', 8, 8], ['goStructTagName', 10, 10], ['goStructTag', 15, 20]],
        \ [],
        \ [],
        \ [],
        \ [['goDeclaration', 1, 5]],
        \ [['goRawString', 14, 44]],
        \ [],
        \ [['goStruct', 7, 13]],
        \ [['goType', 5, 5], ['goStructTag', 8, 8], ['goStructTagName', 10, 10], ['goStructTag', 15, 20]],
        \ [],
        \ [],
    \ ])
finally
    let gopher_highlight = ["string-spell", "string-fmt"]
endtry
endfun

fun! Test_all_varconst() abort
let g:gopher_highlight = ["string-spell", "string-fmt", "fold-block", "fold-import", "fold-pkg-comment", "fold-varconst"]
try
    call TestSyntax(g:test_packdir . '/syntax/testdata/varconst.go',
        \ [
        \ [['goPackage', 1, 8]],
        \ [],
        \ [['goImport', 1, 7], ['goString', 8, 10]],
        \ [],
        \ [['goImport', 1, 7]],
        \ [['goString', 2, 4]],
        \ [['goString', 4, 6]],
        \ [['goString', 4, 6]],
        \ [],
        \ [],
        \ [['goVar', 1, 4], ['goString', 9, 11]],
        \ [],
        \ [['goVar', 1, 4]],
        \ [['goString', 6, 8]],
        \ [['goString', 6, 8]],
        \ [],
        \ [],
        \ [['goDeclaration', 1, 5]],
        \ [['goConst', 2, 7], ['goType', 10, 16], ['goString', 19, 23]],
        \ [],
        \ [['goConst', 2, 7]],
        \ [['goType', 5, 11], ['goString', 14, 18]],
        \ [],
        \ [],
    \ ])
finally
    let gopher_highlight = ["string-spell", "string-fmt"]
endtry
endfun
